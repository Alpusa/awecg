import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef LocaleChangeCallback = void Function(Locale locale);

class I18n implements WidgetsLocalizations {

  const I18n();

  static Locale? _locale;

  static bool _shouldReload = false;

  static set locale(Locale newLocale) {
    _shouldReload = true;
    I18n._locale = newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate = GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback onLocaleChanged = (Locale locale) {};

  static I18n of(BuildContext context) =>
    Localizations.of<I18n>(context, WidgetsLocalizations)!;

  @override
  TextDirection get textDirection => TextDirection.ltr;
  /// "Hello ${name}"
  String greetTo(String name) => "Hello ${name}";
  /// "ECG Signal"
  String get ecgSignal => "ECG Signal";
  /// "Scale"
  String get scale => "Scale";
  /// "Speed"
  String get speed => "Speed";
  /// "Frequency"
  String get frequency => "Frequency";
  /// "Change Scale"
  String get changeScale => "Change Scale";
  /// "Change Speed"
  String get changeSpeed => "Change Speed";
  /// "Reset Scale"
  String get resetScale => "Reset Scale";
  /// "Zoom In"
  String get zoomIn => "Zoom In";
  /// "Zoom Out"
  String get zoomOut => "Zoom Out";
  /// "Reset Zoom"
  String get resetZoom => "Reset Zoom";
}

class _I18n_en_US extends I18n {
  const _I18n_en_US();
  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class GeneratedLocalizationsDelegate 
    extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();
  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", "US")
    ];
  }
  
  LocaleResolutionCallback resolution({Locale? fallback}) {
    return (Locale? locale, Iterable<Locale> supported) {
      if (null != locale && isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    I18n._locale ??= locale;
    I18n._shouldReload = false;
    final String lang = I18n._locale != null ? I18n._locale.toString() : "";
    final String languageCode = I18n._locale != null ? I18n._locale!.languageCode : "";
    if ("en_US" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("en" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }

    return SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length && locale != null; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}